version: "3.7"
services:
  inventory-api:
    build:
      context: ./inventory/api
      dockerfile: ./Dockerfile.dev
    environment:
      DATABASE_URL: "postgres://inventory:password@database:5432/inventory"
      WAIT_HOSTS: database:5432, rabbitmq:5672
      WAIT_TIMEOUT: 180
    ports:
      - "8000:8000"
    volumes:
      - ./inventory/api:/app
    depends_on:
      - rabbitmq
      - database
  sales-api:
    build:
      context: ./sales/api
      dockerfile: ./Dockerfile.dev
    ports:
      - "8001:8001"
    volumes:
      - ./sales/api:/app
    depends_on:
      - rabbitmq
      - database
    environment:
      DATABASE_URL: "postgres://sales_app:password@database:5432/sales_app"
      WAIT_HOSTS: database:5432, rabbitmq:5672
      WAIT_TIMEOUT: 180
  product_info:
    build:
      context: ./sales/api
      dockerfile: ./Dockerfile.product_info.dev
    volumes:
      - ./sales/api:/app
    depends_on:
      - rabbitmq
      - database
    environment:
      DATABASE_URL: "postgres://sales_app:password@database:5432/sales_app"
      WAIT_HOSTS: database:5432, rabbitmq:5672
      WAIT_TIMEOUT: 180
  rabbitmq:
    image: rabbitmq:3
  database:
    image: postgres:14
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database/setup:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_MULTIPLE_DATABASES=inventory,sales
      - POSTGRES_PASSWORD=test-databases
    ports:
      - 15432:5432
  react:
    image: node:latest
    command: npm start
    working_dir: /app
    volumes:
      - ./ghi/app:/app
    environment:
      - HOST=0.0.0.0
      - PORT=3001
    ports:
      - "3001:3001"
volumes:
  pgdata:
